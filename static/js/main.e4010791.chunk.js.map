{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","src","icon","alt","Math","round","description","toUpperCase","feels_like","pressure","wind","speed","sunrise","toLocaleTimeString","sunset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAEMA,EACC,mCADDA,EAEE,2CAwIOC,MArIf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAmDb,OACE,qBACEC,UACyB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,GAClB,WAEF,MANR,SASE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WAjEK,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OACAnB,EADA,qBACqBG,EADrB,+BACiDH,EADjD,aAGFoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA2DU,oBAAhBlB,EAAQG,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKrB,UAAU,OAAf,SA5DQ,SAACsB,GACnB,IAwBIC,EAVO,CACT,YACA,oBACA,SACA,aACA,WACA,cACA,UAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,eACA,OACA,SACA,gBACA,MACA,WACA,SACA,gBACA,gBACA,mBACA,WACA,iBAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA8BDE,CAAY,IAAIC,WAEzC,qBACEhC,UAAU,eACViC,IAAG,4CAAuCnC,EAAQA,QAAQ,GAAGoC,KAA1D,WACHC,IAAI,SAEN,sBAAKnC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGoC,KAAKC,MAAMvC,EAAQG,KAAKC,MAD3B,YAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGwC,YAAYC,mBAGpC,sBAAKvC,UAAU,SAAf,UACE,sBAAKA,UAAU,aAAf,mCACyB,IACvB,iCAAOoC,KAAKC,MAAMvC,EAAQG,KAAKuC,YAA/B,eAEF,sBAAKxC,UAAU,WAAf,4BACY,iCAAOF,EAAQG,KAAKwC,SAApB,aAEZ,sBAAKzC,UAAU,aAAf,4CACkB,iCAAOF,EAAQ4C,KAAKC,MAApB,gBAGpB,sBAAK3C,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,0CAEE,+BACG,IAAIgC,KAA2B,IAAtBlC,EAAQsB,IAAIwB,SAAgBC,0BAG1C,qBACE7C,UAAU,WACVmC,IAAI,MACJF,IAAI,kGAEN,sBAAKjC,UAAU,SAAf,0CAEE,+BACG,IAAIgC,KAA0B,IAArBlC,EAAQsB,IAAI0B,QAAeD,gCAM7C,SChIVE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4010791.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst api = {\n  key: \"efa2ef11f117f7485b2fca8e87a3a2f5\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(\n        `${api.base}weather?q=${query}&units=metric&APPID=${api.key}&lang=pl`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"Styczeń\",\n      \"Luty\",\n      \"Marzec\",\n      \"Kwiecień\",\n      \"Maj\",\n      \"Czerwiec\",\n      \"Lipiec\",\n      \"Sierpień\",\n      \"Wrzesień\",\n      \"Październik\",\n      \"Listopad\",\n      \"Grudzień\",\n    ];\n    let days = [\n      \"Niedziela\",\n      \"Poniedziałek\",\n      \"Wtorek\",\n      \"Środa\",\n      \"Czwartek\",\n      \"Piątek\",\n      \"Sobota\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"app-warm\"\n            : \"app\"\n          : \"app\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <img\n              className=\"weather-icon\"\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              alt=\"icon\"\n            ></img>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)} &#176;C\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].description.toUpperCase()}\n              </div>\n            </div>\n            <div className=\"others\">\n              <div className=\"temp-feels\">\n                Temperatura odczuwalna{\" \"}\n                <span>{Math.round(weather.main.feels_like)} &#176;C</span>\n              </div>\n              <div className=\"pressure\">\n                Ciśnienie <span>{weather.main.pressure} hPa</span>\n              </div>\n              <div className=\"wind-speed\">\n                Prędkość wiatru <span>{weather.wind.speed} m/s</span>\n              </div>\n            </div>\n            <div className=\"sun\">\n              <div className=\"sunrise\">\n                Wschód słońca o:\n                <span>\n                  {new Date(weather.sys.sunrise * 1000).toLocaleTimeString()}\n                </span>\n              </div>\n              <img\n                className=\"sun-icon\"\n                alt=\"sun\"\n                src=\"https://icons-for-free.com/iconfiles/png/512/sun+sunrise+weather+icon-1320196637098579511.png\"\n              ></img>\n              <div className=\"sunset\">\n                Zachód słońca o:\n                <span>\n                  {new Date(weather.sys.sunset * 1000).toLocaleTimeString()}\n                </span>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n// const sunriseTime = new Date(weather.sys.sunrise * 1000).toLocaleTimeString();\n//   const sunsetTime = new Date(weather.sys.sunset * 1000).toLocaleTimeString();\n//   // const weatherIcon = `http://openweathermap.org/img/wn/10d@${weather.weather[0].icon}.png`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}